{"version":3,"sources":["components/Editor.js","components/Preview.js","App.js","constants/index.js","reportWebVitals.js","index.js"],"names":["Editor","id","className","icon","faFileAlt","color","onChange","this","props","handleEditorChange","value","markdown","React","Component","Preview","faEye","faWindowMaximize","size","faWindowMinimize","dangerouslySetInnerHTML","__html","md","Remarkable","App","state","bind","e","setState","target","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"8RAIMA,E,4JAEJ,WACE,OACE,sBAAKC,GAAG,SAAR,UACE,sBAAKC,UAAU,YAAf,UAA2B,cAAC,IAAD,CAAiBC,KAAMC,IAAWC,MAAM,SAAnE,cACA,0BAAUC,SAAUC,KAAKC,MAAMC,mBAAoBC,MAAOH,KAAKC,MAAMG,kB,GANxDC,IAAMC,WAYZb,I,QCXTc,E,4JAEJ,WACE,OACE,sBAAKb,GAAG,UAAR,UACE,sBAAKC,UAAU,YAAf,UACE,cAAC,IAAD,CAAiBC,KAAMY,IAAOV,MAAM,SADtC,WAEE,sBAAMH,UAAU,cAAhB,SAA8B,cAAC,IAAD,CAAiBC,KAAMa,IAAkBX,MAAM,OAAOY,KAAK,SACzF,sBAAMf,UAAU,cAAhB,SAA8B,cAAC,IAAD,CAAiBC,KAAMe,IAAkBb,MAAM,OAAOY,KAAK,YAE3F,qBAAKf,UAAU,UAAUiB,wBAAyB,CAAEC,OAAQb,KAAKC,MAAMG,mB,GAVzDC,IAAMC,WAgBbC,ICdXO,EAAK,I,MAAIC,GA6BEC,E,kDAzBb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXb,SCdkB,0pCDgBpB,EAAKF,mBAAqB,EAAKA,mBAAmBgB,KAAxB,gBALT,E,sDAQnB,SAAmBC,GACjBnB,KAAKoB,SAAS,CAAChB,SAAUe,EAAEE,OAAOlB,U,oBAEpC,WACE,OACE,qCACA,oBAAIT,GAAG,aAAP,6CACA,sBAAKA,GAAG,YAAR,UACE,cAAC,EAAD,CAAQQ,mBAAoBF,KAAKE,mBAAoBE,SAAUJ,KAAKiB,MAAMb,WAC1E,cAAC,EAAD,CAASA,SAAUU,EAAGQ,OAAOtB,KAAKiB,MAAMb,sB,GAnB9BC,IAAMC,WEGTiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d362cefd.chunk.js","sourcesContent":["import React from 'react';\nimport { faFileAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass Editor extends React.Component {\n\n  render() {\n    return (\n      <div id=\"editor\">\n        <div className=\"title-bar\"><FontAwesomeIcon icon={faFileAlt} color=\"#fff\" />  Editor</div>\n        <textarea onChange={this.props.handleEditorChange} value={this.props.markdown} />\n      </div>);\n  }\n\n}\n\nexport default Editor;\n","import React from 'react';\nimport { faEye, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\nimport { faWindowMaximize, faWindowRestore } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass Preview extends React.Component {\n\n  render() {\n    return (\n      <div id=\"preview\">\n        <div className=\"title-bar\">\n          <FontAwesomeIcon icon={faEye} color=\"#fff\" /> Preview\n          <span className=\"window-icon\"><FontAwesomeIcon icon={faWindowMaximize} color=\"#000\" size=\"sm\" /></span>\n          <span className=\"window-icon\"><FontAwesomeIcon icon={faWindowMinimize} color=\"#000\" size=\"sm\" /></span>\n        </div>\n        <div className=\"content\" dangerouslySetInnerHTML={{ __html: this.props.markdown }} />\n      </div>);\n  }\n\n}\n\nexport default Preview;\n","import './App.css';\nimport * as Constants from './constants/index.js';\nimport React from 'react';\nimport Editor from './components/Editor.js';\nimport Preview from './components/Preview.js';\nimport { Remarkable } from 'remarkable';\n\nvar md = new Remarkable();\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: Constants.placeholder\n    };\n    this.handleEditorChange = this.handleEditorChange.bind(this);\n  }\n\n  handleEditorChange(e){\n    this.setState({markdown: e.target.value});\n  }\n  render() {\n    return (\n      <>\n      <h1 id=\"page-title\">Simple React Markdown Previewer</h1>\n      <div id=\"container\">\n        <Editor handleEditorChange={this.handleEditorChange} markdown={this.state.markdown} />\n        <Preview markdown={md.render(this.state.markdown)} />\n      </div>\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","export const placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}